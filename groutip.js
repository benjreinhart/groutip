// Generated by CoffeeScript 1.3.1
(function() {
  var Groutip;

  Groutip = (function() {
    var POSITION_MAPPING;

    Groutip.name = 'Groutip';

    POSITION_MAPPING = {
      topCenter: {
        my: 'center top',
        at: 'center top'
      },
      bottomCenter: {
        my: 'center bottom',
        at: 'center bottom'
      },
      bottomLeft: {
        my: 'left bottom',
        at: 'left bottom'
      },
      rightCenter: {
        my: 'left center',
        at: 'right center'
      },
      leftCenter: {
        my: 'right center',
        at: 'left center'
      }
    };

    Groutip.prototype.template = "    <div>      <p>This is placeholder text, add your own!</p>    </div>  ";

    Groutip.prototype.defaults = function() {
      return {
        klass: 'groutip'
      };
    };

    function Groutip(opts) {
      var _this = this;
      this.$el = opts.el;
      this.options = $.extend(this.defaults(), opts);
      this._constructToolTip();
      $(window).resize(function() {
        return _this._position();
      });
      this.render();
    }

    Groutip.prototype.render = function() {
      var _base;
      this.$toolTip.css({
        opacity: 0
      }).appendTo('body');
      this._storeDimensions();
      this._position();
      this.$toolTip.css({
        opacity: 1
      });
      return typeof (_base = this.options).onRender === "function" ? _base.onRender() : void 0;
    };

    Groutip.prototype.remove = function() {
      var _base;
      if (typeof (_base = this.options).onRemove === "function") {
        _base.onRemove();
      }
      return this.$toolTip.remove();
    };

    Groutip.prototype._constructToolTip = function() {
      var _ref;
      this.$toolTip = $((_ref = this.options.template) != null ? _ref : this.template);
      return this.$toolTip.attr('class', this._getClasses());
    };

    Groutip.prototype._getClasses = function() {
      if (this.options["class"] == null) {
        return this.options.klass;
      }
      return "" + this.options.klass + " " + this.options["class"];
    };

    Groutip.prototype._position = function() {
      var oL, oT, offset, opts, position, _ref, _ref1, _ref2;
      position = (_ref = this.options.position) != null ? _ref : 'topCenter';
      opts = POSITION_MAPPING[position];
      oT = +((_ref1 = this.options.offsetTop) != null ? _ref1 : 0);
      oL = +((_ref2 = this.options.offsetLeft) != null ? _ref2 : 0);
      switch (position) {
        case 'topCenter':
          offset = "" + oL + " -" + (oT + this.height);
          break;
        case 'bottomCenter':
        case 'bottomLeft':
          offset = "" + oL + " " + (oT + this.height);
          break;
        case 'leftCenter':
          offset = "-" + oL + " " + oT;
          break;
        default:
          offset = "" + oL + " " + oT;
      }
      $.extend(opts, {
        of: this.$el,
        offset: offset
      });
      return this.$toolTip.position(opts);
    };

    Groutip.prototype._storeDimensions = function() {
      this.width = this.$toolTip.outerWidth();
      return this.height = this.$toolTip.outerHeight();
    };

    return Groutip;

  })();

  jQuery.fn.groutip = function(options) {
    options.el = this;
    return new Groutip(options);
  };

}).call(this);
